{"version":3,"sources":["wrong.svg","store/reducer.ts","store/AppContext.tsx","components/Header.tsx","components/CardMovie.tsx","components/Search.tsx","components/Shimmer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MovieReducer","state","action","type","loading","movies","payload","error","Error","INITIAL_STATE","AppContext","createContext","dispatch","Provider","Consumer","Header","className","CardMovie","movie","data-testid","onClick","window","open","imdbID","key","src","Poster","alt","Title","Year","Search","onSubmit","placeholder","useState","query","setQuery","e","preventDefault","onChange","target","value","Shimmer","width","height","style","Object","assign","GET_MOVIE_API_URL","App","useContext","fetchData","a","axios","get","data","Response","useEffect","marginTop","display","justifyContent","alignItems","flexDirection","WrongImage","Array","fill","map","_","i","marginBottom","Boolean","location","hostname","match","ReactDOM","render","children","useReducer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09b76dc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wrong.d014957d.svg\";","export interface Movie {\n  Poster: string\n  Title: string\n  Type: string\n  Year: string\n  imdbID: string\n}\n\nexport interface MovieResponse {\n  Response: string\n  totalResults: string\n  Search: Movie[]\n}\n\nexport interface MoviesState {\n  loading: boolean\n  movies: Movie[]\n  error: boolean\n}\n\nexport type SEARCH_MOVIE_ACTION =\n  | { type: 'SEARCH_MOVIE' }\n  | { type: 'SET_MOVIE'; payload: Movie[] }\n  | { type: 'SEARCH_MOVIE_ERROR' }\n\nexport const MovieReducer = (state: MoviesState, action: SEARCH_MOVIE_ACTION) => {\n  switch (action.type) {\n    case 'SEARCH_MOVIE':\n      return { ...state, loading: true }\n    case 'SET_MOVIE':\n      return { ...state, movies: action.payload, error: false, loading: false }\n    case 'SEARCH_MOVIE_ERROR':\n      return { ...state, error: true }\n    default:\n      throw new Error('Unexpected Action')\n  }\n}\n","import React, { useReducer, createContext, FunctionComponent } from 'react'\nimport { MovieReducer, MoviesState, SEARCH_MOVIE_ACTION } from './reducer'\n\nconst INITIAL_STATE: MoviesState = {\n  loading: false,\n  movies: [],\n  error: false\n}\nconst AppContext = createContext<\n  typeof INITIAL_STATE & {\n    dispatch: (action: SEARCH_MOVIE_ACTION) => void\n  }\n>({\n  ...INITIAL_STATE,\n  dispatch: () => {}\n})\nconst { Consumer, Provider } = AppContext\n\nconst AppProvider: FunctionComponent = ({ children }) => {\n  const [state, dispatch] = useReducer(MovieReducer, INITIAL_STATE)\n  return (\n    <Provider\n      value={{\n        ...state,\n        dispatch\n      }}\n    >\n      {children}\n    </Provider>\n  )\n}\n\nexport { AppProvider, Consumer as AppConsumer, AppContext }\n","import React from 'react'\n\nconst Header = () => {\n  return <div className=\"header\">React Hooks Movies App</div>\n}\n\nexport default Header\n","import React from 'react'\nimport { Movie } from '../store/reducer'\n\nconst DEFAULT_PLACEHOLDER_IMAGE =\n  'http://www.movienewz.com/img/films/poster-holder.jpg'\n\nconst CardMovie = ({ movie }: { movie: Movie }) => {\n  const handleClick = () => {\n    window.open(`https://imdb.com/title/${movie.imdbID}`, '_blank')\n  }\n\n  return (\n    <div\n      data-testid=\"movie-list\"\n      onClick={handleClick}\n      className=\"movie-list__item\"\n      key={movie.imdbID}\n    >\n      <img\n        src={movie.Poster === 'N/A' ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster}\n        alt={movie.Title}\n      />\n\n      <p className=\"movie-list__item-title\">{movie.Title}</p>\n      <p className=\"movie-list__item-year\">{movie.Year}</p>\n    </div>\n  )\n}\n\nexport default CardMovie\n","import React, { FormEvent, useState } from 'react'\n\nconst Search = ({\n  onSubmit,\n  placeholder\n}: {\n  onSubmit: (query: string) => void\n  placeholder: string\n}) => {\n  const [query, setQuery] = useState('')\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault()\n    setQuery('')\n    onSubmit(query)\n  }\n\n  return (\n    <div className=\"search\">\n      <form onSubmit={handleSubmit}>\n        <input\n          data-testid=\"movie-search-input\"\n          type=\"text\"\n          onChange={(e: any) => setQuery(e.target.value)}\n          value={query}\n          placeholder={placeholder}\n        />\n        <button data-testid=\"movie-search-button\">Search</button>\n      </form>\n    </div>\n  )\n}\n\nexport default Search\n","import React from 'react'\n\nconst Shimmer = ({ width, height, style = {} }: { width: number; height: number; style?: {} }) => {\n  return (\n    <div\n      className=\"shimmer\"\n      style={Object.assign(\n        {},\n        {\n          width,\n          height\n        },\n        { ...style }\n      )}\n    />\n  )\n}\n\nexport default Shimmer\n","import React, { useContext, useEffect } from 'react'\nimport axios from 'axios'\nimport { AppContext } from './store/AppContext'\nimport { MovieResponse } from './store/reducer'\nimport Header from './components/Header'\nimport CardMovie from './components/CardMovie'\nimport Search from './components/Search'\nimport Shimmer from './components/Shimmer'\nimport WrongImage from './wrong.svg'\nimport './App.css'\n\nconst GET_MOVIE_API_URL = (query: string = 'man') =>\n  `https://www.omdbapi.com/?s=${query}&apikey=4a3b711b`\n\nconst App: React.FC = () => {\n  const { dispatch, movies, loading, error } = useContext(AppContext)\n\n  const fetchData = async (query?: string) => {\n    dispatch({\n      type: 'SEARCH_MOVIE'\n    })\n    try {\n      const { data }: { data: MovieResponse } = await axios.get(GET_MOVIE_API_URL(query))\n      if (data.Response === 'True') {\n        return dispatch({\n          type: 'SET_MOVIE',\n          payload: data.Search\n        })\n      }\n\n      dispatch({ type: 'SEARCH_MOVIE_ERROR' })\n    } catch (error) {\n      dispatch({\n        type: 'SEARCH_MOVIE_ERROR'\n      })\n    }\n  }\n\n  useEffect(() => {\n    fetchData()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const handleSubmit = (query: string) => {\n    fetchData(query)\n  }\n\n  const LoadingComponent = () => (\n    <>\n      {Array(10)\n        .fill('')\n        .map((_, i) => (\n          <div\n            data-testid=\"movie-loading\"\n            key={i}\n            style={{\n              marginBottom: 18,\n              flexDirection: 'column',\n              display: 'flex',\n              alignItems: 'center'\n            }}\n          >\n            <Shimmer width={245} height={390} style={{ marginBottom: 6 }} />\n            <Shimmer width={145} height={10} style={{ marginBottom: 6 }} />\n            <Shimmer width={70} height={10} />\n          </div>\n        ))}\n    </>\n  )\n\n  const ErrorIllust = () => (\n    <div\n      data-testid=\"movie-error\"\n      style={{\n        marginTop: 28,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column'\n      }}\n    >\n      <img src={WrongImage} width=\"600\" alt=\"Something went wrong\" />\n      <h1>Something went wrong</h1>\n    </div>\n  )\n\n  return (\n    <>\n      <Header />\n      <Search onSubmit={handleSubmit} placeholder=\"Search your movies...\" />\n      {error ? (\n        <ErrorIllust />\n      ) : (\n        <div data-testid=\"movie-container\" className=\"movie-list__container\">\n          {loading ? (\n            <LoadingComponent />\n          ) : (\n            movies.map(movie => <CardMovie movie={movie} key={movie.imdbID} />)\n          )}\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { AppProvider } from './store/AppContext'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <AppProvider>\n    <App />\n  </AppProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}